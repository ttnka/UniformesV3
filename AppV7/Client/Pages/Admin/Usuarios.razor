
@inherits UsuariosBase
@inject NotificationService NS
@using AppV7.Shared

<RadzenCard>
@if (LosUsers != null && LasOrgs.Any())
{
    <div class="form-grup row">        
        <div class="col-sm-6">
            <div class="nav-item px-3">
                
                <RadzenButton Icon="refresh" style="margin-bottom: 10px" ButtonStyle="ButtonStyle.Info"                 
                Click="@LeerUsers" Disabled="@Editando"/>
            </div>
        </div>
        
        <div class="col-sm-6">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href=@($"/indexusers")>
                <span class="oi oi-caret-left" aria-hidden="true"></span> Regresar a Inicio</NavLink>
            </div>
        </div>
    </div>

    <RadzenDataGrid @ref="UsersGrid" AllowFiltering="true" AllowPaging="true" PageSize="55" 
                AllowSorting="true" AllowColumnResize="true"
                ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                EditMode="DataGridEditMode.Single" 
                Data="@LosUsers" TItem="Z110_Usuarios" RowUpdate="@OnUpdateRow" 
                RowCreate="@OnCreateRow" >
                
        <Template Context="datos1">
 
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Detalle Empresas ">
                        Uno 
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Extras">
                        
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </Template>
<!-- AQUI EMPIEZA REPORTE-->
        
        <Columns>
            <RadzenDataGridColumn TItem="Z110_Usuarios" Property="Nombre" Title="Nombre" 
                Filterable="true" Width="150px">
                <Template Context="datos">
                    @datos.Nombre
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Nombre" @bind-Value="datos.Nombre" Style="width: 90%" /> <br>
                    <RadzenLengthValidator Component="Nombre" Min="1" Max="30" 
                        Text="El Nombre es Obligatorio" />

                </EditTemplate>
            </RadzenDataGridColumn>
        
            <RadzenDataGridColumn TItem="Z110_Usuarios" Property="Paterno" Title="Apellidos" 
                Filterable="true"  Width="170px">
                <Template Context="datos">
                    @datos.Paterno @datos.Materno
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Paterno" @bind-Value="datos.Paterno" 
                    Style="width: 90%" Placeholder="Paterno" /><br />
                    <RadzenTextBox Name="Paterno" @bind-Value="datos.Materno" 
                    Style="width: 90%" Placeholder="Materno" /><br />
                    <RadzenRequiredValidator Component="Paterno" Text="El Paterno es Obligatorio." />
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Z110_Usuarios" Property="Nivel" Title="Nivel" 
                Filterable="false" Resizable="true" Width="120px" >
                <Template Context="datos">
                        @if (DatosDic.ContainsKey($"Nivel_{datos.Nivel}"))
                        {
                            <label>@DatosDic[$"Nivel_{datos.Nivel}"]</label>
                    } else
                {
                    <label>No tengo Info</label>
                }
                </Template>
                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Nivel" Data=@LosNiveles @bind-Value=@datos.Nivel
                        ValueProperty="Key" TextProperty="Value" AllowClear="true" Style="width: 300px;" />
                </EditTemplate>
            </RadzenDataGridColumn>
        
            <RadzenDataGridColumn TItem="Z110_Usuarios" Property="OrgId" Title="Organizacion" 
                Filterable="false" Resizable="true" Width="180px" >
                <Template Context="datos">
                        @if (DatosDic.ContainsKey($"Org_{datos.OrgId}"))
                        {
                            <label>@DatosDic[$"Org_{datos.OrgId}"]</label>
                    } else
                {
                    <label>No tengo Info</label>
                }
                </Template>
                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Org" Data=@LasOrgs @bind-Value=@datos.OrgId
                        ValueProperty="OrgId" TextProperty="Comercial" AllowClear="true" Style="width: 300px;" />
                </EditTemplate>
                
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn TItem="Z110_Usuarios" Property="OldEmail" Title="Email" 
                Filterable="true" Width="250px">
                <Template Context="datos">
                    @datos.OldEmail
                </Template>
                
            </RadzenDataGridColumn>
         

            <RadzenDataGridColumn TItem="Z110_Usuarios" Context="sampleBlazorModelsSampleOrder" 
                    Filterable="false" Sortable="false" TextAlign="TextAlign.Center" 
                    Width="250px" Title="Estado">
                <Template Context="datos">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" 
                        Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" >
                    </RadzenButton>
                    
                    @if(datos.Status == true)
                    { 
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }
                </Template>

                <EditTemplate Context="datos">
                    
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" 
                        Class="m-1" Click="@((args) => SaveRow(datos))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" 
                    Click="@((args) => CancelEdit(datos))" />
                    
                    <br />
                    @if (datos.Estado != 3)
                        {
                            <label>Borrar este registro? Si </label>
                            <RadzenSwitch @bind-Value=@datos.Status Name="Status" /> 
                            <label>No!</label>
                        }
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

}
else
{
    <div class="spinner"></div>
}
</RadzenCard>

@code {
    Z110_Usuarios UserToInsert = new();


    async Task EditRow(Z110_Usuarios user)
    {
        await UsersGrid.EditRow(user);
        Editando = !Editando;
    }
    async void OnUpdateRow(Z110_Usuarios user)
    {
        if (user == UserToInsert) UserToInsert = null!;

        Editando = !Editando;
        await UserIServ.UpDateUsuario(user);

        string texto = $"Se actualizo un registro {user.Nombre}";
        texto += $"{user.Paterno} {user.Materno} {user.OldEmail}";
        await Escribir(ElUsuario.UsuariosId, ElUsuario.OrgId, texto, false);
    }
    async Task SaveRow(Z110_Usuarios user)
    {


        await UsersGrid.UpdateRow(user);
    }
    void CancelEdit(Z110_Usuarios user)
    {
        if (user == UserToInsert) UserToInsert = null!;
        Editando = !Editando; 
        UsersGrid.CancelEditRow(user);
    }
    async Task InsertRow()
    {
        /*
        UserToInsert = new Z110_Usuarios();
        UserToInsert.userId = Guid.NewGuid().ToString();
        UserToInsert.Estado = 3;
        Editando = !Editando;

        await UsersGrid.InsertRow(UserToInsert); 
    */
    }
    async void OnCreateRow(Z110_Usuarios user)
    {
        /*
        if (user == UserToInsert) UserToInsert = null;

        Z110_Usuarios resultado = new Z110_Usuarios();
        resultado = await userIServ.Adduser(user);

        string texto = $"Se creo un registro {user.Rfc}";
            texto += $"{user.Comercial} {user.RazonSocial} desde sistema";
            await Escribir(ElUsuario.UsuariosId, ElUsuario.userId, texto, false);
    */
    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

    async Task LoadData()
    {
        LosUsers = await UserIServ.Buscar("All", "Vacio");
        
    }
}
